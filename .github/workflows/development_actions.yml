name: Deploy to Development
on:
  push:
    branches:
      - development
jobs:
  Run-Test:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [ 3.12 ]

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: library
          POSTGRES_USER: hasnat
          POSTGRES_PASSWORD: hasnat
          POSTGRES_PORT: 5432
          options: >-
            --health-cmd pg_isready
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Create .env file from example.env
        run: cp example.env .env

      - name: Wait for PostgreSQL to start
        run: sleep 10

      - name: Install Dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Print PostgreSQL Container Logs
        run: docker logs ${{ job.services.postgres.id }}

      - name: Run Tests
        run: |
          python3 manage.py test

  Development-Deploy:
    needs: Run-Test
    permissions:
        id-token: write
        contents: read
    runs-on: ubuntu-latest
    
    steps:
      - name: Configure OpenID Connect
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_DEV_ARN }}
          aws-region: ${{ secrets.AWS_DEV_REGION }}

      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get Tags for Image
        id: metadata
        uses: docker/metadata-action@v3
        with:
          images: "${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_DEV_REPOSITORY_NAME }}"
          tags: |
            type=raw,value=latest
            type=raw,value=main
            type=sha

      - name: Build, tag, and push docker image to Amazon ECR
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.metadata.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_DEV_IP }}
          username: ${{ secrets.EC2_DEV_USERNAME }}
          key: ${{ secrets.EC2_DEV_SECRET }}
          port: 22
          script: |
            /bin/bash -e /home/strativ/scripts/DockerManage.sh
